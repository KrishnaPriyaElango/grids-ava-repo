{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","gridSize","setGridSize","grid","setGrid","groupedCells","setGroupedCells","count","setCount","clickedCell","setClickedCell","hoveredCell","setHoveredCell","clicked","setClicked","highlightColor","setHighlightColor","bgColor","setBgColor","useEffect","newGrid","Array","fill","map","Math","round","random","length","toString","visited","includes","findNeighbours","x","y","push","className","type","min","max","step","value","onChange","e","Number","target","id","name","row","i","j","onMouseEnter","onMouseLeave","onClick","style","backgroundColor","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b4d0ece6.chunk.js","sourcesContent":["import './App.css';\nimport React, { useEffect, useState } from 'react';\n\nfunction App() {\n  const [gridSize, setGridSize] = useState(5);\n  const [grid, setGrid] = useState([[0, 0, 0, 0, 1],\n  [1, 1, 0, 0, 0],\n  [1, 1, 0, 1, 1],\n  [0, 0, 0, 0, 0],\n  [1, 1, 1, 0, 0]]);\n  const [groupedCells, setGroupedCells] = useState([]);\n  const [count, setCount] = useState('');\n  const [clickedCell, setClickedCell] = useState('');\n  const [hoveredCell, setHoveredCell] = useState('');\n  const [clicked, setClicked] = useState(false);\n  const [highlightColor, setHighlightColor] = useState(\"#caa69e\");\n  const [bgColor, setBgColor] = useState(\"#5d4954\");\n  useEffect(() => {\n    let newGrid = Array(gridSize).fill().map(() =>\n      Array(gridSize).fill().map(() => Math.round(Math.random())));\n    setGrid(newGrid);\n    setClickedCell([]);\n    setGroupedCells([]);\n    setCount('');\n  }, [gridSize])\n\n  useEffect(() => {\n    if (clicked) {\n      setCount(groupedCells.length ? groupedCells.length.toString() : '');\n    }\n  }, [groupedCells, clicked])\n\n  useEffect(() => {\n    function findNeighbours(x, y) {\n      if (x < 0 || x >= gridSize || y < 0 || y >= gridSize || grid[x][y] === 0 || visited.includes(x + ' ' + y)) {\n        return\n      }\n\n      if (grid[x][y] === 1) {\n        visited.push(x + ' ' + y)\n        setGroupedCells([...visited]);\n      }\n      findNeighbours(x - 1, y)\n      findNeighbours(x, y + 1)\n      findNeighbours(x + 1, y)\n      findNeighbours(x, y - 1)\n    }\n    let visited = [];\n    if (hoveredCell.length && !(groupedCells.includes(hoveredCell[0] + ' ' + hoveredCell[1]))) {\n      findNeighbours(hoveredCell[0], hoveredCell[1]);\n    }\n\n  }, [hoveredCell, gridSize, grid, groupedCells])\n\n  function handleHighlightColorChange(e) {\n    setHighlightColor(e.target.value);\n  }\n  function handleBgColorChange(e) {\n    setBgColor(e.target.value);\n  }\n  return (\n    <div className=\"app\">\n      <div className=\"container\">\n        <div className=\"controls-view\">\n          Grid Size:  <input type=\"range\" min=\"5\" max=\"10\" step=\"1\" value={gridSize} onChange={(e) => setGridSize(Number(e.target.value))} />\n          Background Color:  <input type=\"color\" id=\"favcolor\" name=\"favcolor\" onChange={handleBgColorChange} value={bgColor}></input>\n          Highlight on Hover:  <input type=\"color\" id=\"favcolor\" name=\"favcolor\" onChange={handleHighlightColorChange} value={highlightColor}></input>\n        </div>\n        <div className=\"grid-view\">\n          {grid.map((row, i) => {\n            return (\n              <div key={i} className=\"grid-row\">\n                {row.map((value, j) => {\n                  return (<div key={j} onMouseEnter={() => {\n                    if (value === 1) {\n                      setHoveredCell([i, j]);\n                      setClicked(false);\n                    } else {\n                      setGroupedCells([]);\n                    }\n                  }}\n                    onMouseLeave={() => {\n                      setHoveredCell([]);\n                      setClicked(false);\n                    }}\n                    onClick={() => {\n                      if (value === 1) {\n                        setClicked(true);\n                        setHoveredCell([i, j]);\n                        setClickedCell([i, j]);\n                      }\n                    }}\n                    className={\"cell\" + (value === 1 ? \" pointer\" : \"\")}\n                    style={{ backgroundColor: groupedCells.includes(i + ' ' + j) ? highlightColor : value === 1 ? bgColor : '' }}>\n                    {clickedCell[0] === i && clickedCell[1] === j ? count : ' '}\n                  </div>);\n                })}\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}